<?php

//-- Categori: Add
	// add entries to category registry
	$rootcat = CategoryUtil::getCategoryByPath('/__SYSTEM__/Modules/Global');
	CategoryRegistryUtil::insertEntry('%module.name%', 'SubCategory01', 'Main', $rootcat['id']);
	CategoryRegistryUtil::insertEntry('%module.name%', 'SubCategory02', 'Main', $rootcat['id']);


//-- DB: Get DBObject
		$loObject = new %modulename%_DBObject_%YourObjectName%( null, "id");

		$laResult = $loObject->get( $where, $sort, $startnum, $pagesize);
		//$liID = $loObject->getID();
		//$lsS = $loObject->getIDField();
		%|%

//-- DB: Insert Object
		$laData = array(
			"update_date"    => $now,
			"update_by"      => $uid,
			"status_id"      => 0,
		);
		$laResult = DBUtil::insertObject( $laData, 'your_table_name', 'id');
		$liID = $laResult[ "id"];

//-- DB: Update Object
    $laData = array(
    	"id" => $lsSessionId,
      "update_by" => 0,
      "update_date" => $now,
      "status_id" => 1
    );
    $laResult = DBUtil::updateObject( $laData, 'your_table_name', "", "id");
		
		
//-- DB: Push&Pop
		$this->oDBConn = DBConnectionStack::init( "%|%%dbid%"); // default: 'default'

		DBConnectionStack::popConnectionForce( true);


//-- DB: SQL Exec
		$lsSQL = "%|%";
		$loResult = DBUtil::executeSQL( $lsSQL);
		$laData = DBUtil::marshallObjects( $loResult);

//-- Permission: Check Permission
		if ( !SecurityUtil::checkPermission( '%modulename%::', '::', ACCESS_ADD)) {
			return LogUtil::registerPermissionError( ModUtil::url( '%modulename%', 'user', 'main'));
		}

//-- Constanta
		$lsVariable = %modulename%_Constant::VariableName;
		
//-- Exception: throw forbidden
		throw new Zikula_Exception_Forbidden( LogUtil::getErrorMsgPermission());
		
//-- Function -> create function
	public function functionname( $args) {
		global $Aksi;
		if (!SecurityUtil::checkPermission( '%module.name%::', '::', ACCESS_READ)) {
				return LogUtil::registerPermissionError(ModUtil::url( '%module.name%', 'user', 'functionname'));
		}
		$now = DateUtil::getDatetime();
		$lsUserName = UserUtil::getVar( 'uname');
		$liUID = UserUtil::getVar( 'uid');

    $lsObject = FormUtil::getPassedValue( 'id', '', 'GETPOST', FILTER_SANITIZE_STRING);
    $lsVariable = print_r( $_REQUEST, true);

		// your code here
		%|%
		
		$this->view->assign( 'date', $now);
		$this->view->assign( 'uname', $lsUserName);
		$this->view->assign( 'uid', $liUID);
		$this->view->assign( 'variable', $lsVariable);
		return $this->view->fetch( "user/file-template.tpl");
	}


//-- Get BaseURL
		System::getBaseURL()

//-- Get DateTime
		DateUtil::getDatetime()

//-- Get Passed Value
		$psS = FormUtil::getPassedValue( 'variablename', null, "GETPOST", FILTER_SANITIZE_STRING); 

//-- Get UserID
		$liUID = UserUtil::getVar( 'uid');

//-- Get Username
		$lsUname = UserUtil::getVar( 'uname');
		
//-- Handler: getFormValue
  //usage: if boolean --> $varname = (bool)$this->getFormValue('YesNo', false);
  private function getFormValue($key, $default){
  	return isset($this->formValues[$key]) ? $this->formValues[$key] : $default;
		// $psVariabel = FormUtil::getPassedValue('namavariabel', null, 'GETPOST', FILTER_SANITIZE_STRING);
  }
		
//-- Message: Info Message
		LogUtil::registerStatus( $this->__( 'Your Messages'));

//-- Message: Error Message
		LogUtil::registerError( $this->__( 'Your Messages'));
		
//-- MetaTags : set
		$sm = ServiceUtil::getManager();
		$sm[ 'zikula_view.metatags'][ 'target_meta_tags'] = $value;
		
//-- PageUtil:setVar
		PageUtil::setVar( 'title', 'your title');

//-- Respon: Ajax Json
		$laReturn = array(
			"iErr" => 0,
			"statusmsg" => "OK",
			"debug" => "",
			"data" => $laData,
		);
		$lsReturn = new Zikula_Response_Ajax_Json( $laReturn);
		return $lsReturn;
		
		
//-- System: Redirect URL
		$this->redirect( $lsURL);

//-- View: Fetch
		$lsHTML = $this->view->fetch( "directory/filename.tpl");

//-- View: Assign
		$this->view->assign( 'sVariable', $lsVariable);

//-- View: Form
		$form = FormUtil::newForm( '%modulename%', $this);
		$form->assign( 'sVariable', $lsYourVariable);
		return $form->execute( 'directory/filename.tpl', new %modulename%_Handler_YourFunction());

//-- URL: generate url
		$lsURL = ModUtil::url('%modulename%', 'user','yourfunction', array( "item" => 0 ));
		
